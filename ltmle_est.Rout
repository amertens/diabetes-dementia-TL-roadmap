
R version 4.0.4 (2021-02-15) -- "Lost Library Book"
Copyright (C) 2021 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> rm(list=ls())
> library(ltmle)
Warning message:
package ‘ltmle’ was built under R version 4.0.5 
> library(here)
here() starts at /home/andrew.mertens/diabetes-dementia-TL-roadmap
> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> library(data.table)

Attaching package: ‘data.table’

The following objects are masked from ‘package:dplyr’:

    between, first, last

> # load("./data/clean/finaldata.RData")
> data <- readRDS(here("simulated data/novo_registry_simulated.RDS"))
> 
> str(data)
tibble [45,000 × 48] (S3: grouped_df/tbl_df/tbl/data.frame)
 $ age                     : num [1:45000] 3 3 3 3 3 2 5 3 3 3 ...
 $ sex                     : num [1:45000] 0 0 0 0 1 1 0 0 0 0 ...
 $ T1                      : num [1:45000] 0 0 1 0 0 0 0 1 1 0 ...
 $ T2                      : num [1:45000] 0 0 1 0 0 0 0 1 1 0 ...
 $ T3                      : num [1:45000] 0 0 1 0 0 0 0 1 1 0 ...
 $ T4                      : num [1:45000] 0 0 1 0 0 0 0 1 1 0 ...
 $ T5                      : num [1:45000] 0 0 1 0 0 0 0 1 1 0 ...
 $ T6                      : num [1:45000] 0 0 1 0 0 0 0 1 1 0 ...
 $ T7                      : num [1:45000] 0 0 1 0 0 0 0 1 1 0 ...
 $ T8                      : num [1:45000] 0 0 1 0 0 0 0 1 1 0 ...
 $ T9                      : num [1:45000] 0 0 1 0 0 0 0 1 1 0 ...
 $ death                   : num [1:45000] NA NA NA NA NA NA NA NA NA NA ...
 $ dementia                : num [1:45000] NA NA NA NA NA NA NA NA NA NA ...
 $ stroke                  : num [1:45000] 0 0 0 0 0 0 0 0 0 0 ...
 $ ami                     : num [1:45000] 0 0 0 0 0 0 0 0 0 0 ...
 $ weight                  : num [1:45000] 0.002779 0.003973 0.000111 0.001969 0.002563 ...
 $ A                       : chr [1:45000] "sglt2" "sglt2" "glp1" "sglt2" ...
 $ any_event               : num [1:45000] 0 0 0 0 0 0 0 0 0 0 ...
 $ CVOT                    : num [1:45000] 0 0 0 0 0 0 0 0 0 0 ...
 $ any_death               : num [1:45000] 0 0 0 0 0 0 0 0 0 0 ...
 $ any_dementia            : num [1:45000] 0 0 0 0 0 0 0 0 0 0 ...
 $ total_usage             : num [1:45000] 4 2 3 6 1 7 1 1 9 9 ...
 $ any_drug                : num [1:45000] 1 1 1 1 1 1 1 1 1 1 ...
 $ tot_weight              : num [1:45000] 0.251 0.251 0.251 0.251 0.251 ...
 $ edu                     : Factor w/ 4 levels "Advanced","Basic",..: 2 3 2 2 3 3 2 3 3 3 ...
 $ income                  : num [1:45000] 9.37 9.28 10.84 9.96 8.38 ...
 $ diabduration            : num [1:45000] 9.79 9.68 8.82 10.49 10.03 ...
 $ start_year              : int [1:45000] 2 2 5 5 4 6 1 5 5 3 ...
 $ baseline_prob           : num [1:45000] 2.22 1.9 2.27 2.35 1.84 ...
 $ normalized_baseline_prob: num [1:45000] 0.379 0.248 0.4 0.432 0.226 ...
 $ kidney_1                : int [1:45000] 0 0 0 0 0 0 0 0 0 0 ...
 $ kidney_2                : num [1:45000] 0 0 0 0 0 0 0 0 0 0 ...
 $ kidney_3                : num [1:45000] 0 0 0 0 0 0 0 0 0 0 ...
 $ kidney_4                : num [1:45000] 0 0 0 0 0 0 0 0 0 0 ...
 $ kidney_5                : num [1:45000] 0 0 0 0 0 0 0 0 0 0 ...
 $ kidney_6                : num [1:45000] 0 0 0 0 0 0 0 0 0 0 ...
 $ kidney_7                : num [1:45000] 0 0 0 0 0 0 0 0 0 0 ...
 $ kidney_8                : num [1:45000] 0 0 0 0 0 0 0 0 0 0 ...
 $ kidney_9                : num [1:45000] 0 0 0 0 0 0 0 0 0 0 ...
 $ obese_1                 : int [1:45000] 0 0 1 0 1 1 0 0 0 1 ...
 $ obese_2                 : int [1:45000] 1 0 0 0 1 0 0 1 1 0 ...
 $ obese_3                 : int [1:45000] 1 1 1 0 1 0 0 0 1 0 ...
 $ obese_4                 : int [1:45000] 0 0 1 0 0 0 0 1 0 0 ...
 $ obese_5                 : int [1:45000] 0 0 1 0 1 1 0 0 0 0 ...
 $ obese_6                 : int [1:45000] 0 0 1 0 0 1 1 0 0 1 ...
 $ obese_7                 : int [1:45000] 1 0 1 1 0 0 0 1 0 1 ...
 $ obese_8                 : int [1:45000] 1 0 0 0 0 1 1 0 1 0 ...
 $ obese_9                 : int [1:45000] 1 1 0 0 0 0 1 1 1 1 ...
 - attr(*, "groups")= tibble [2 × 2] (S3: tbl_df/tbl/data.frame)
  ..$ any_dementia: num [1:2] 0 1
  ..$ .rows       : list<int> [1:2] 
  .. ..$ : int [1:44920] 1 2 3 4 5 6 7 8 9 10 ...
  .. ..$ : int [1:80] 44921 44922 44923 44924 44925 44926 44927 44928 44929 44930 ...
  .. ..@ ptype: int(0) 
  ..- attr(*, ".drop")= logi TRUE
> names(data)
 [1] "age"                      "sex"                     
 [3] "T1"                       "T2"                      
 [5] "T3"                       "T4"                      
 [7] "T5"                       "T6"                      
 [9] "T7"                       "T8"                      
[11] "T9"                       "death"                   
[13] "dementia"                 "stroke"                  
[15] "ami"                      "weight"                  
[17] "A"                        "any_event"               
[19] "CVOT"                     "any_death"               
[21] "any_dementia"             "total_usage"             
[23] "any_drug"                 "tot_weight"              
[25] "edu"                      "income"                  
[27] "diabduration"             "start_year"              
[29] "baseline_prob"            "normalized_baseline_prob"
[31] "kidney_1"                 "kidney_2"                
[33] "kidney_3"                 "kidney_4"                
[35] "kidney_5"                 "kidney_6"                
[37] "kidney_7"                 "kidney_8"                
[39] "kidney_9"                 "obese_1"                 
[41] "obese_2"                  "obese_3"                 
[43] "obese_4"                  "obese_5"                 
[45] "obese_6"                  "obese_7"                 
[47] "obese_8"                  "obese_9"                 
> head(data)
# A tibble: 6 x 48
# Groups:   any_dementia [1]
    age   sex    T1    T2    T3    T4    T5    T6    T7    T8    T9 death
  <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>
1     3     0     0     0     0     0     0     0     0     0     0    NA
2     3     0     0     0     0     0     0     0     0     0     0    NA
3     3     0     1     1     1     1     1     1     1     1     1    NA
4     3     0     0     0     0     0     0     0     0     0     0    NA
5     3     1     0     0     0     0     0     0     0     0     0    NA
6     2     1     0     0     0     0     0     0     0     0     0    NA
# … with 36 more variables: dementia <dbl>, stroke <dbl>, ami <dbl>,
#   weight <dbl>, A <chr>, any_event <dbl>, CVOT <dbl>, any_death <dbl>,
#   any_dementia <dbl>, total_usage <dbl>, any_drug <dbl>, tot_weight <dbl>,
#   edu <fct>, income <dbl>, diabduration <dbl>, start_year <int>,
#   baseline_prob <dbl>, normalized_baseline_prob <dbl>, kidney_1 <int>,
#   kidney_2 <dbl>, kidney_3 <dbl>, kidney_4 <dbl>, kidney_5 <dbl>,
#   kidney_6 <dbl>, kidney_7 <dbl>, kidney_8 <dbl>, kidney_9 <dbl>,
#   obese_1 <int>, obese_2 <int>, obese_3 <int>, obese_4 <int>, obese_5 <int>,
#   obese_6 <int>, obese_7 <int>, obese_8 <int>, obese_9 <int>
> table(data$dementia)

 5  7  8 
55  8 17 
> table(data$A)

 glp1 sglt2 
23562 21438 
> table(data$T1)

    0     1 
21438 23562 
> 
> table(data$A, data$any_dementia)
       
            0     1
  glp1  23537    25
  sglt2 21383    55
> table(data$A, data$dementia)
       
         5  7  8
  glp1   0  8 17
  sglt2 55  0  0
> table(data$A, data$death)
       
         2  3  4  5  6  7  8  9
  glp1  80 67 65 44 51 78 86 45
  sglt2  0  0  0  0  0  0  0 13
> 
> 
> 
> 
> # need to expand out the data to get distinct A and Y nodes 
> 
> #choose outcome and create outcome var
> clean_outcome <- function(outvar){
+ for(i in 1:9){
+   data[[outvar]] <-as.numeric(data[[outvar]])
+   #head(data[[outvar]])
+   #table(data[[outvar]])
+   #table(is.na(data[[outvar]]))
+   data[,paste0("Y",i)]<- as.numeric(ifelse(data[[outvar]]<=i,1,0))
+   # table(data[,paste0("Y",i)],data[[outvar]])
+   table(is.na(data[,paste0("Y",i)]),is.na(data[[outvar]]))
+   class(data[,paste0("Y",i)])
+   data[is.na(data[paste0("Y",i)]),paste0("Y",i)] <-0
+   names(data)[names(data) == paste0("T",i)] <- paste0("A",i)
+ }
+   return(data)
+ }
> 
> cleandata <- clean_outcome(outvar="dementia")
Warning message:
The `i` argument of ``[<-`()` can't be a matrix as of tibble 3.0.0.
Convert to a vector.
This warning is displayed once every 8 hours.
Call `lifecycle::last_warnings()` to see where this warning was generated. 
> names(cleandata)
 [1] "age"                      "sex"                     
 [3] "A1"                       "A2"                      
 [5] "A3"                       "A4"                      
 [7] "A5"                       "A6"                      
 [9] "A7"                       "A8"                      
[11] "A9"                       "death"                   
[13] "dementia"                 "stroke"                  
[15] "ami"                      "weight"                  
[17] "A"                        "any_event"               
[19] "CVOT"                     "any_death"               
[21] "any_dementia"             "total_usage"             
[23] "any_drug"                 "tot_weight"              
[25] "edu"                      "income"                  
[27] "diabduration"             "start_year"              
[29] "baseline_prob"            "normalized_baseline_prob"
[31] "kidney_1"                 "kidney_2"                
[33] "kidney_3"                 "kidney_4"                
[35] "kidney_5"                 "kidney_6"                
[37] "kidney_7"                 "kidney_8"                
[39] "kidney_9"                 "obese_1"                 
[41] "obese_2"                  "obese_3"                 
[43] "obese_4"                  "obese_5"                 
[45] "obese_6"                  "obese_7"                 
[47] "obese_8"                  "obese_9"                 
[49] "Y1"                       "Y2"                      
[51] "Y3"                       "Y4"                      
[53] "Y5"                       "Y6"                      
[55] "Y7"                       "Y8"                      
[57] "Y9"                      
> table(cleandata$Y1,cleandata$Y2)
   
        0
  0 45000
> 
> #rename the time-varying covariates
> #BMI and kidney disease:
> cleandata <- data.table(cleandata)
> setnames(cleandata, old = c("obese_1","obese_2","obese_3","obese_4","obese_5","obese_6",
+                     "obese_7","obese_8","obese_9","kidney_1","kidney_2","kidney_3",    
+                     "kidney_4","kidney_5","kidney_6","kidney_7","kidney_8",    
+                      "kidney_9" ), new = c("L1a","L2a","L3a","L4a","L5a","L6a",
+                         "L7a","L8a","L9a","L1b","L2b","L3b","L4b","L5b","L6b",
+                         "L7b","L8b","L9b"))
> setnames(cleandata, old = c("sex","stroke","age"),new=c("L1c","L1d","L1f"))
> names(cleandata)
 [1] "L1f"                      "L1c"                     
 [3] "A1"                       "A2"                      
 [5] "A3"                       "A4"                      
 [7] "A5"                       "A6"                      
 [9] "A7"                       "A8"                      
[11] "A9"                       "death"                   
[13] "dementia"                 "L1d"                     
[15] "ami"                      "weight"                  
[17] "A"                        "any_event"               
[19] "CVOT"                     "any_death"               
[21] "any_dementia"             "total_usage"             
[23] "any_drug"                 "tot_weight"              
[25] "edu"                      "income"                  
[27] "diabduration"             "start_year"              
[29] "baseline_prob"            "normalized_baseline_prob"
[31] "L1b"                      "L2b"                     
[33] "L3b"                      "L4b"                     
[35] "L5b"                      "L6b"                     
[37] "L7b"                      "L8b"                     
[39] "L9b"                      "L1a"                     
[41] "L2a"                      "L3a"                     
[43] "L4a"                      "L5a"                     
[45] "L6a"                      "L7a"                     
[47] "L8a"                      "L9a"                     
[49] "Y1"                       "Y2"                      
[51] "Y3"                       "Y4"                      
[53] "Y5"                       "Y6"                      
[55] "Y7"                       "Y8"                      
[57] "Y9"                      
> Anodes <- c("A1","A2","A3","A4","A5","A6","A7","A8","A9")
> Ynodes <- c("Y1","Y2","Y3","Y4","Y5","Y6","Y7","Y8","Y9")
> Cnodes <-NULL
> Lnodes <- c("L1a","L1b","L1c","L1d","L1f",
+              "L2a","L2b",
+              "L3a","L3b",
+              "L4a","L4b",
+              "L5a","L5b",
+              "L6a","L6b",
+              "L7a","L7b",
+              "L8a","L8b",
+              "L9a","L9b")
> 
> # subset <- cleandata %>% select(
> #                                "L1a","L1b","L1c","L1d","L1f","A1","Y1",
> #                                "L2a","L2b","A2","Y2",
> #                                "L3a","L3b","A3","Y3",
> #                                "L4a","L4b","A4","Y4",
> #                                "L5a","L5b","A5","Y5",
> #                                "L6a","L6b","A6","Y6",
> #                                "L7a","L7b","A7","Y7",
> #                                "L8a","L8b","A8","Y8",
> #                                "L9a","L9b","A9","Y9")
> subset <- cleandata %>% select(
+   "L1a","L1b","L1c","L1d","L1f","A1",
+   "L2a","L2b","A2",
+   "L3a","L3b","A3",
+   "L4a","L4b","A4",
+   "L5a","L5b","A5",
+   "L6a","L6b","A6",
+   "L7a","L7b","A7",
+   "L8a","L8b","A8",
+   "L9a","L9b","A9",Ynodes)
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(Ynodes)` instead of `Ynodes` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
> 
> names(subset)
 [1] "L1a" "L1b" "L1c" "L1d" "L1f" "A1"  "L2a" "L2b" "A2"  "L3a" "L3b" "A3" 
[13] "L4a" "L4b" "A4"  "L5a" "L5b" "A5"  "L6a" "L6b" "A6"  "L7a" "L7b" "A7" 
[25] "L8a" "L8b" "A8"  "L9a" "L9b" "A9"  "Y1"  "Y2"  "Y3"  "Y4"  "Y5"  "Y6" 
[37] "Y7"  "Y8"  "Y9" 
> #SL.library<- c( "SL.step", "SL.mean")#, "SL.ranger","SL.nnet", "SL.biglasso")#"SL.glm","SL.xgboost",
> #SL.library<- c( "SL.glm", "SL.mean", "SL.ranger","SL.nnet", "SL.biglasso")#"SL.glm","SL.xgboost",
> #SL.library<- c(  "SL.mean","SL.glm", "SL.gam","SL.glmnet", "SL.randomForest")#"SL.glm","SL.xgboost",
> SL.library<- c(  "SL.mean","SL.glm", "SL.glmnet")#"SL.glm","SL.xgboost",
> SL.library<- c(  "SL.mean","SL.glm","SL.glmnet", "SL.randomForest")#"SL.glm","SL.xgboost",
> 
> 
> abar <- list(a=rep(1,(length(Anodes))), b=rep(0,(length(Anodes))))
> 
> # start_time <- Sys.time()
> # result <- ltmle(subset, Anodes = Anodes, Ynodes = Ynodes, 
> #                 Cnodes=Cnodes, Lnodes=Lnodes, abar = abar,
> #                 survivalOutcome=F,SL.library=SL.library,variance.method = "ic")
> # end_time <- Sys.time()
> # 
> # end_time - start_time
> # 
> # summary(result)
> 
> get_estimates <- function(gcomp_output,est_type){
+   #CRUDE ESTIMATE
+   data_crude <- cleandata %>% select(Anodes, Ynodes)
+   
+   out <-  ltmle(data_crude, Anodes = Anodes, Ynodes = Ynodes, 
+                 Cnodes=Cnodes, Lnodes=NULL, abar = abar,
+                 survivalOutcome=F,SL.library=SL.library,gcomp=gcomp_output,
+                 variance.method = "ic")
+   #ADJUSTED ESTIMATE
+   out2 <-  ltmle(subset, Anodes = Anodes, Ynodes = Ynodes, 
+                  Cnodes=Cnodes, Lnodes=Lnodes, abar = abar,
+                  survivalOutcome=F,SL.library=SL.library,gcomp=gcomp_output,
+                  variance.method = "ic")
+   
+   Crude <- summary(out,est_type)$effect.measures$ATE$estimate
+   Adjusted <- summary(out2,est_type)$effect.measures$ATE$estimate
+   CI_crude <- summary(out,est_type)$effect.measures$ATE$CI
+   CI_adj <- summary(out2,est_type)$effect.measures$ATE$CI
+   
+   return(data.frame(est_type,Crude,CI_crude,Adjusted,CI_adj))
+ }
> 
> 
> set.seed(1235)
> start_time <- Sys.time()
> system.time((est_tmle <- get_estimates(gcomp_output=F,est_type="tmle")))
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(Anodes)` instead of `Anodes` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Loading required namespace: SuperLearner
Qform not specified, using defaults:
formula for Y1:
Q.kplus1 ~ A1 + A2 + A3 + A4 + A5 + A6 + A7 + A8 + A9

gform not specified, using defaults:
formula for A1:
A1 ~ 1
formula for A2:
A2 ~ A1
formula for A3:
A3 ~ A1 + A2
formula for A4:
A4 ~ A1 + A2 + A3
formula for A5:
A5 ~ A1 + A2 + A3 + A4
formula for A6:
A6 ~ A1 + A2 + A3 + A4 + A5
formula for A7:
A7 ~ A1 + A2 + A3 + A4 + A5 + A6
formula for A8:
A8 ~ A1 + A2 + A3 + A4 + A5 + A6 + A7
formula for A9:
A9 ~ A1 + A2 + A3 + A4 + A5 + A6 + A7 + A8

Loading required package: nnls
Loading required namespace: glmnet
Loading required namespace: randomForest
Estimate of time to completion: 19 to 350 minutes
Qform not specified, using defaults:
formula for L2a:
Q.kplus1 ~ L1a + L1b + L1c + L1d + L1f + A1
formula for L3a:
Q.kplus1 ~ L1a + L1b + L1c + L1d + L1f + A1 + L2a + L2b + A2
formula for L4a:
Q.kplus1 ~ L1a + L1b + L1c + L1d + L1f + A1 + L2a + L2b + A2 +     L3a + L3b + A3
formula for L5a:
Q.kplus1 ~ L1a + L1b + L1c + L1d + L1f + A1 + L2a + L2b + A2 +     L3a + L3b + A3 + L4a + L4b + A4
formula for L6a:
Q.kplus1 ~ L1a + L1b + L1c + L1d + L1f + A1 + L2a + L2b + A2 +     L3a + L3b + A3 + L4a + L4b + A4 + L5a + L5b + A5
formula for L7a:
Q.kplus1 ~ L1a + L1b + L1c + L1d + L1f + A1 + L2a + L2b + A2 +     L3a + L3b + A3 + L4a + L4b + A4 + L5a + L5b + A5 + L6a +     L6b + A6
formula for L8a:
Q.kplus1 ~ L1a + L1b + L1c + L1d + L1f + A1 + L2a + L2b + A2 +     L3a + L3b + A3 + L4a + L4b + A4 + L5a + L5b + A5 + L6a +     L6b + A6 + L7a + L7b + A7
formula for L9a:
Q.kplus1 ~ L1a + L1b + L1c + L1d + L1f + A1 + L2a + L2b + A2 +     L3a + L3b + A3 + L4a + L4b + A4 + L5a + L5b + A5 + L6a +     L6b + A6 + L7a + L7b + A7 + L8a + L8b + A8
formula for Y1:
Q.kplus1 ~ L1a + L1b + L1c + L1d + L1f + A1 + L2a + L2b + A2 +     L3a + L3b + A3 + L4a + L4b + A4 + L5a + L5b + A5 + L6a +     L6b + A6 + L7a + L7b + A7 + L8a + L8b + A8 + L9a + L9b +     A9

gform not specified, using defaults:
formula for A1:
A1 ~ L1a + L1b + L1c + L1d + L1f
formula for A2:
A2 ~ L1a + L1b + L1c + L1d + L1f + A1 + L2a + L2b
formula for A3:
A3 ~ L1a + L1b + L1c + L1d + L1f + A1 + L2a + L2b + A2 + L3a +     L3b
formula for A4:
A4 ~ L1a + L1b + L1c + L1d + L1f + A1 + L2a + L2b + A2 + L3a +     L3b + A3 + L4a + L4b
formula for A5:
A5 ~ L1a + L1b + L1c + L1d + L1f + A1 + L2a + L2b + A2 + L3a +     L3b + A3 + L4a + L4b + A4 + L5a + L5b
formula for A6:
A6 ~ L1a + L1b + L1c + L1d + L1f + A1 + L2a + L2b + A2 + L3a +     L3b + A3 + L4a + L4b + A4 + L5a + L5b + A5 + L6a + L6b
formula for A7:
A7 ~ L1a + L1b + L1c + L1d + L1f + A1 + L2a + L2b + A2 + L3a +     L3b + A3 + L4a + L4b + A4 + L5a + L5b + A5 + L6a + L6b +     A6 + L7a + L7b
formula for A8:
A8 ~ L1a + L1b + L1c + L1d + L1f + A1 + L2a + L2b + A2 + L3a +     L3b + A3 + L4a + L4b + A4 + L5a + L5b + A5 + L6a + L6b +     A6 + L7a + L7b + A7 + L8a + L8b
formula for A9:
A9 ~ L1a + L1b + L1c + L1d + L1f + A1 + L2a + L2b + A2 + L3a +     L3b + A3 + L4a + L4b + A4 + L5a + L5b + A5 + L6a + L6b +     A6 + L7a + L7b + A7 + L8a + L8b + A8 + L9a + L9b

Estimate of time to completion: 20 to 412 minutes
Error in lognet(x, is.sparse, ix, jx, y, weights, offset, alpha, nobs,  : 
  one multinomial or binomial class has 1 or 0 observations; not allowed
In addition: There were 50 or more warnings (use warnings() to see the first 50)
Error in lognet(x, is.sparse, ix, jx, y, weights, offset, alpha, nobs,  : 
  one multinomial or binomial class has 1 or 0 observations; not allowed
In addition: Warning message:
In FUN(X[[i]], ...) : Error in algorithm SL.glmnet 
  The Algorithm will be removed from the Super Learner (i.e. given weight 0) 

Error in lognet(x, is.sparse, ix, jx, y, weights, offset, alpha, nobs,  : 
  one multinomial or binomial class has 1 or 0 observations; not allowed
In addition: Warning message:
In FUN(X[[i]], ...) : Error in algorithm SL.glmnet 
  The Algorithm will be removed from the Super Learner (i.e. given weight 0) 

Error in lognet(x, is.sparse, ix, jx, y, weights, offset, alpha, nobs,  : 
  one multinomial or binomial class has 1 or 0 observations; not allowed
In addition: Warning message:
In FUN(X[[i]], ...) : Error in algorithm SL.glmnet 
  The Algorithm will be removed from the Super Learner (i.e. given weight 0) 

Error in lognet(x, is.sparse, ix, jx, y, weights, offset, alpha, nobs,  : 
  one multinomial or binomial class has 1 or 0 observations; not allowed
In addition: Warning message:
In FUN(X[[i]], ...) : Error in algorithm SL.glmnet 
  The Algorithm will be removed from the Super Learner (i.e. given weight 0) 

Error in lognet(x, is.sparse, ix, jx, y, weights, offset, alpha, nobs,  : 
  one multinomial or binomial class has 1 or 0 observations; not allowed
In addition: Warning message:
In FUN(X[[i]], ...) : Error in algorithm SL.glmnet 
  The Algorithm will be removed from the Super Learner (i.e. given weight 0) 

Error in lognet(x, is.sparse, ix, jx, y, weights, offset, alpha, nobs,  : 
  one multinomial or binomial class has 1 or 0 observations; not allowed
In addition: Warning message:
In FUN(X[[i]], ...) : Error in algorithm SL.glmnet 
  The Algorithm will be removed from the Super Learner (i.e. given weight 0) 

Error in lognet(x, is.sparse, ix, jx, y, weights, offset, alpha, nobs,  : 
  one multinomial or binomial class has 1 or 0 observations; not allowed
In addition: Warning message:
In FUN(X[[i]], ...) : Error in algorithm SL.glmnet 
  The Algorithm will be removed from the Super Learner (i.e. given weight 0) 

